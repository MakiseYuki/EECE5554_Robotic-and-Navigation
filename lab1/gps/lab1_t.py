"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class lab1_t(object):
    __slots__ = ["timestamp", "latitude", "lat_direction", "longitude", "long_direction", "altitude", "utmeasting", "utmnorthing"]

    def __init__(self):
        self.timestamp = 0.0
        self.latitude = 0.0
        self.lat_direction = ""
        self.longitude = 0.0
        self.long_direction = ""
        self.altitude = 0.0
        self.utmeasting = 0.0
        self.utmnorthing = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(lab1_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">dd", self.timestamp, self.latitude))
        __lat_direction_encoded = self.lat_direction.encode('utf-8')
        buf.write(struct.pack('>I', len(__lat_direction_encoded)+1))
        buf.write(__lat_direction_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">d", self.longitude))
        __long_direction_encoded = self.long_direction.encode('utf-8')
        buf.write(struct.pack('>I', len(__long_direction_encoded)+1))
        buf.write(__long_direction_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">ddd", self.altitude, self.utmeasting, self.utmnorthing))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != lab1_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return lab1_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = lab1_t()
        self.timestamp, self.latitude = struct.unpack(">dd", buf.read(16))
        __lat_direction_len = struct.unpack('>I', buf.read(4))[0]
        self.lat_direction = buf.read(__lat_direction_len)[:-1].decode('utf-8', 'replace')
        self.longitude = struct.unpack(">d", buf.read(8))[0]
        __long_direction_len = struct.unpack('>I', buf.read(4))[0]
        self.long_direction = buf.read(__long_direction_len)[:-1].decode('utf-8', 'replace')
        self.altitude, self.utmeasting, self.utmnorthing = struct.unpack(">ddd", buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if lab1_t in parents: return 0
        tmphash = (0xd174d17ba84832c5) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if lab1_t._packed_fingerprint is None:
            lab1_t._packed_fingerprint = struct.pack(">Q", lab1_t._get_hash_recursive([]))
        return lab1_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

